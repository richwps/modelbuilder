package de.hsos.richwps.mb.execView.dialog.components;

import de.hsos.richwps.mb.richWPS.entity.specifier.OutputComplexDataSpecifier;
import javax.swing.border.TitledBorder;
import net.opengis.wps.x100.ComplexDataDescriptionType;

/**
 *
 * @author dalcacer
 */
public class OutputComplexData extends javax.swing.JPanel {

    private OutputComplexDataSpecifier specifier;

    private String id;
    private ComplexDataDescriptionType[] subtypes_;

    /**
     * Creates new form OutputsParamPanel
     */
    public OutputComplexData(OutputComplexDataSpecifier specifier) {
        initComponents();
        this.specifier = specifier;

        //SupportedComplexDataType type = description.getComplexOutput();
        String theidentifier = specifier.getIdentifier();
        String theabstract = specifier.getAbstract();
        String thetitel = specifier.getTitle();

        this.selectType.removeAllItems();

        for (String type : specifier.getMimetypes()) {
            this.selectType.addItem(type);
        }

        //fixme
        this.id = theidentifier;
        //this.identifier.setText(theidentifier);

        this.setBorder(new TitledBorder(theidentifier));
        this.hint.setText("Hint: " + thetitel + ", " + theabstract);
    }

    public OutputComplexDataSpecifier getSpecifier() {
        return this.specifier;
    }

    public boolean isSelected() {
        return this.selectOutput.isSelected();
    }

    public String getMimeType() {
        return (String) this.selectType.getSelectedItem();
    }

    public boolean asReference() {
        return this.selectAsReference.isSelected();
    }

    public String getSchema(String mimetype) {
        String result = "";
        for (ComplexDataDescriptionType thetype : subtypes_) {
            if (thetype.getMimeType().equals(mimetype)) {
                result = thetype.getSchema();
            }
        }
        if (result == null) {
            return "";
        }
        return result;
    }

    public String getEncoding(String mimetype) {
        String result = "";
        for (ComplexDataDescriptionType thetype : subtypes_) {
            if (thetype.getMimeType().equals(mimetype)) {
                result = thetype.getEncoding();
            }
        }
        if (result == null) {
            return "";
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        selectOutput = new javax.swing.JCheckBox();
        selectType = new javax.swing.JComboBox();
        selectAsReference = new javax.swing.JCheckBox();
        selectStore = new javax.swing.JCheckBox();
        hint = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        selectOutput.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectOutput, gridBagConstraints);

        selectType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectType, gridBagConstraints);

        selectAsReference.setText("As Reference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectAsReference, gridBagConstraints);

        selectStore.setText("Store");
        selectStore.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectStore, gridBagConstraints);

        hint.setText("Hint");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(hint, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hint;
    private javax.swing.JCheckBox selectAsReference;
    private javax.swing.JCheckBox selectOutput;
    private javax.swing.JCheckBox selectStore;
    private javax.swing.JComboBox selectType;
    // End of variables declaration//GEN-END:variables
}
