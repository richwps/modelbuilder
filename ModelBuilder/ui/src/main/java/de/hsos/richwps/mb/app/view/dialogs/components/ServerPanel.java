package de.hsos.richwps.mb.app.view.dialogs.components;

import de.hsos.richwps.mb.richWPS.entity.IRequest;
import de.hsos.richwps.mb.richWPS.entity.impl.DescribeRequest;
import java.net.HttpURLConnection;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Dialog panel for server selection.
 * @author dalcacer
 * @version 0.0.1
 */
public class ServerPanel extends APanel {

    private List<String> remotes;
    private IRequest request;

    /**
     * Creates new form SeverSelection
     */
    public ServerPanel() {
        initComponents();
        this.remotes = new ArrayList<String>();
        this.init();
    }

    /**
     *
     * @param wpsurls
     * @param dto
     */
    public ServerPanel(List<String> wpsurls, IRequest request) {
        this.remotes = wpsurls;
        this.request = (DescribeRequest) request;
        this.initComponents();
        this.init();
    }

    private void init() {
        this.serverSelectionBox.removeAllItems();
        for (String s : this.remotes) {
            this.serverSelectionBox.addItem(s);
        }
    }

    /**
     *
     * @return
     */
    @Override
    public boolean isValidInput() {
        String server = (String) this.serverSelectionBox.getSelectedItem();
        // FIXME How else can we check the endpoints existence, and readiness?
        // HTTP::HEAD Operation 405 Method Not Allowed, instead of 404?
        // HTTP::GET Operation 405 Method Not Allowed, instead of 404?
        try {
            java.net.URL urlobj = new java.net.URL(server);
            URLConnection conn = urlobj.openConnection();
            conn.connect();
            HttpURLConnection httpConnection = (HttpURLConnection) conn;
            int resp = httpConnection.getResponseCode();
            if (resp != 200) {
                JOptionPane.showMessageDialog(this, "Unable to reach service.");
                return false;
            }
        } catch (Exception e) {
            de.hsos.richwps.mb.Logger.log("Unable to reach service: " + server);
            JOptionPane.showMessageDialog(this, "Unable to reach service.");
            return false;
        }
        return true;
    }

    /**
     *
     */
    @Override
    public void updateRequest() {
        this.request = new DescribeRequest();
        this.request.setEndpoint((String) this.serverSelectionBox.getSelectedItem());
    }

    /**
     *
     * @return
     */
    @Override
    public IRequest getRequest() {
        return request;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        serverSelectionLabel = new javax.swing.JLabel();
        serverSelectionBox = new javax.swing.JComboBox();
        stepDescriptionLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        serverSelectionLabel.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        serverSelectionLabel.setLabelFor(serverSelectionBox);
        serverSelectionLabel.setText("Server:");
        serverSelectionLabel.setName("serverSelectionLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(serverSelectionLabel, gridBagConstraints);

        serverSelectionBox.setEditable(true);
        serverSelectionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        serverSelectionBox.setPreferredSize(new java.awt.Dimension(400, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(serverSelectionBox, gridBagConstraints);

        stepDescriptionLabel.setFont(new java.awt.Font("Droid Sans", 1, 14)); // NOI18N
        stepDescriptionLabel.setText("Please select or enter a Web Processing Service.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(stepDescriptionLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox serverSelectionBox;
    private javax.swing.JLabel serverSelectionLabel;
    private javax.swing.JLabel stepDescriptionLabel;
    // End of variables declaration//GEN-END:variables

}
