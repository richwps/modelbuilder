package de.hsos.richwps.mb.ui.dialogs.components;

import de.hsos.richwps.mb.richWPS.boundary.RichWPSProvider;
import de.hsos.richwps.mb.richWPS.entity.IOutputArgument;
import de.hsos.richwps.mb.richWPS.entity.IRequest;
import de.hsos.richwps.mb.richWPS.entity.impl.TestRequest;
import de.hsos.richwps.mb.ui.dialogs.components.ADialogPanel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import layout.TableLayout;

/**
 * Dialog for ouput selection..
 *
 * @author dalcacer
 * @version 0.0.1
 */
public class OutputSelection extends ADialogPanel {

    private List<JCheckBox> availableVariables;
    private RichWPSProvider provider;
    private TestRequest request;
    private List<String> transitions;

    /**
     * Creates new form OutputParameterization
     *
     * @param provider
     * @param request
     */
    public OutputSelection(final RichWPSProvider provider, IRequest request, List<String> transitions) {
        this.provider = provider;
        this.request = (TestRequest) request;
        this.transitions = transitions;
        initComponents();

        final String selectedserver = this.request.getEndpoint();
        final String selectedprocess = this.request.getIdentifier();
        this.selectedServer.setText(selectedserver);
        this.selectedProcess.setText(selectedprocess);

        this.availableVariables = new ArrayList<>();
        /*/update only if necessary 
        if (!request.isLoaded()) {
            this.provider.wpsDescribeProcess(this.request);
        }*/
        this.createOutputPanels();
    }

    private void createOutputPanels() {

        if (this.request.getVariables().isEmpty()) {
            JOptionPane optionPane = new JOptionPane("Unable to load variables from"
                    + "process description.", JOptionPane.WARNING_MESSAGE);
            optionPane.setVisible(true);
            return;
        }

        int j = 0;
        for (String variable : this.request.getVariables()) {
            JCheckBox checky = new JCheckBox(variable);
            String hint = transitions.get(j++);
            checky.setToolTipText(hint);
            this.availableVariables.add(checky);
        }

        JPanel variablesPanel = new JPanel();
        double size[][] = new double[2][1];
        size[0] = new double[]{TableLayout.FILL};

        double innersize[] = new double[availableVariables.size()];
        for (int i = 0; i < availableVariables.size(); i++) {
            innersize[i] = TableLayout.PREFERRED;
        }
        size[1] = innersize;

        TableLayout layout = new TableLayout(size);
        variablesPanel.setLayout(layout);

        int i = 0;
        for (JCheckBox panel : this.availableVariables) {
            String c = "0," + i;
            variablesPanel.add(panel, c);
            i++;
        }

        this.outputsPanelScrollPane.setAlignmentX(javax.swing.JScrollPane.LEFT_ALIGNMENT);
        this.outputsPanelScrollPane.setAlignmentY(javax.swing.JScrollPane.TOP_ALIGNMENT);
        this.outputsPanelScrollPane.getVerticalScrollBar().setValue(0);
        this.outputsPanelScrollPane.setViewportView(variablesPanel);
    }

    /**
     * Transcodes the availableVariables panel-wise into executerequest
     * actualoutputs.
     */
    @Override
    public void updateRequest() {
        HashMap<String, IOutputArgument> theoutputs = new HashMap<>();
        List<String> variables = new ArrayList();
        for (JCheckBox panel : this.availableVariables) {

            if (panel.isSelected()) {
                variables.add(panel.getText());
            }

        }
        this.request.setVariables(variables);
    }

    /**
     *
     * @return
     */
    @Override
    public TestRequest getRequest() {
        return this.request;
    }

    /**
     *
     * @return
     */
    @Override
    public boolean isValidInput() {
        boolean someThingSelected = false;
        for (JCheckBox panel : this.availableVariables) {

            if (panel.isSelected()) {
                someThingSelected = true;
            }
        }

        if (!someThingSelected) {
            JOptionPane.showMessageDialog(this, "Please select at least one output.");
            return false;
        }

        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        selectedServer = new javax.swing.JLabel();
        selectedProcess = new javax.swing.JLabel();
        selectedServerLabel = new javax.swing.JLabel();
        selectedProcessLabel = new javax.swing.JLabel();
        outputsPanelScrollPane = new javax.swing.JScrollPane();

        setPreferredSize(new java.awt.Dimension(620, 650));
        setLayout(new java.awt.GridBagLayout());

        selectedServer.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectedServer, gridBagConstraints);

        selectedProcess.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectedProcess, gridBagConstraints);

        selectedServerLabel.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        selectedServerLabel.setLabelFor(selectedServer);
        selectedServerLabel.setText("Server:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectedServerLabel, gridBagConstraints);

        selectedProcessLabel.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        selectedProcessLabel.setLabelFor(selectedProcess);
        selectedProcessLabel.setText("Process:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(selectedProcessLabel, gridBagConstraints);

        outputsPanelScrollPane.setBorder(null);
        outputsPanelScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        outputsPanelScrollPane.setMinimumSize(new java.awt.Dimension(610, 600));
        outputsPanelScrollPane.setPreferredSize(new java.awt.Dimension(610, 600));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(outputsPanelScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane outputsPanelScrollPane;
    private javax.swing.JLabel selectedProcess;
    private javax.swing.JLabel selectedProcessLabel;
    private javax.swing.JLabel selectedServer;
    private javax.swing.JLabel selectedServerLabel;
    // End of variables declaration//GEN-END:variables

}
